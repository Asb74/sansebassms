name: iOS Signed Build & TestFlight

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  ios:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios
          pod install --no-repo-update

      - name: Install fastlane
        run: gem install fastlane -N

      # === Firmas (p12 y .mobileprovision) ===
      - name: Decode signing assets
        shell: bash
        run: |
          printf "%s" "${{ secrets.P12_BASE64 }}" | base64 --decode > cert.p12
          printf "%s" "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          printf "%s" "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" > AuthKey.p8
          printf "%s" "${{ secrets.P12_PASSWORD }}" > p12pass.txt

      - name: Verify P12 (hash + password)
        shell: bash
        run: |
          echo "Runner SHA256:"; shasum -a 256 cert.p12
          openssl pkcs12 -in cert.p12 -nokeys -passin file:p12pass.txt -info >/dev/null

      - name: Create keychain & import p12
        shell: bash
        env:
          KEYCHAIN_PASSWORD: actions
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          # Import del p12 (cert + private key)
          security import cert.p12 -k build.keychain -P "$(cat p12pass.txt)" -T /usr/bin/codesign -T /usr/bin/security
          # Dar acceso a herramientas de Apple
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          # Usar SOLO este llavero para la build
          security list-keychains -d user -s build.keychain
          security find-identity -v -p codesigning build.keychain || true

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV

      # === Asegurar FLUTTER_ROOT correcto en Xcode ===
      - name: Fix FLUTTER_ROOT for iOS build
        shell: bash
        run: |
          mkdir -p ios/Flutter
          if [ -f ios/Flutter/Generated.xcconfig ]; then
            /usr/bin/sed -i '' -E "s#^FLUTTER_ROOT=.*#FLUTTER_ROOT=${FLUTTER_ROOT}#g" ios/Flutter/Generated.xcconfig || true
          else
            cat > ios/Flutter/Generated.xcconfig <<EOF
          FLUTTER_ROOT=${FLUTTER_ROOT}
          EOF
                    fi
                    for cfg in ios/Flutter/Debug.xcconfig ios/Flutter/Release.xcconfig; do
                      [ -f "$cfg" ] || touch "$cfg"
                      grep -q 'Generated.xcconfig' "$cfg" || echo '#include? "Generated.xcconfig"' >> "$cfg"
                    done
                    echo "Usando $(grep ^FLUTTER_ROOT ios/Flutter/Generated.xcconfig)"

                # === Build: archivo SIN firmar ===
                - name: Archive with xcodebuild (unsigned)
                  shell: bash
                  run: |
                    set -e
                    cd ios
                    xcodebuild -workspace Runner.xcworkspace \
                      -scheme Runner \
                      -configuration Release \
                      -archivePath ../build/Runner.xcarchive \
                      -destination 'generic/platform=iOS' \
                      CODE_SIGNING_ALLOWED=NO \
                      CODE_SIGN_STYLE=Manual \
                      DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
                      clean archive

                # === Export: firma para App Store ===
                - name: Create ExportOptions.plist
                  shell: bash
                  run: |
                    cat > ExportOptions.plist <<'EOF'
                    <?xml version="1.0" encoding="UTF-8"?>
                    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                    <plist version="1.0">
                    <dict>
                      <key>method</key><string>app-store</string>
                      <key>signingStyle</key><string>manual</string>
                      <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
                      <key>provisioningProfiles</key>
                      <dict>
                        <key>${{ secrets.APP_IDENTIFIER }}</key>
                        <string>Sansebassms AppStore Profile</string>
                      </dict>
                      <key>uploadSymbols</key><true/>
                      <key>stripSwiftSymbols</key><true/>
                      <key>compileBitcode</key><false/>
                      <key>destination</key><string>export</string>
                    </dict>
                    </plist>
                    EOF

                - name: Export IPA
                  shell: bash
                  run: |
                    xcodebuild -exportArchive \
                      -archivePath build/Runner.xcarchive \
                      -exportOptionsPlist ExportOptions.plist \
                      -exportPath build/ios_export

                # === Subida a TestFlight ===
                - name: Upload to TestFlight (fastlane pilot)
                  env:
                    APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
                    APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
                  shell: bash
                  run: |
                    cat > api_key.json <<EOF
                    {
                      "key_id": "${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
                      "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
                      "key": "$(cat AuthKey.p8)",
                      "in_house": false
                    }
                    EOF
                    IPA_PATH=$(ls build/ios_export/*.ipa | head -n 1)
                    fastlane pilot upload --api_key_path api_key.json --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

                - name: Upload signed IPA artifact
                  uses: actions/upload-artifact@v4
                  with:
                    name: ios-signed-ipa
                    path: build/ios_export/*.ipa
