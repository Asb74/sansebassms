name: iOS Signed Build & TestFlight

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'   # sube a TestFlight cuando etiquetes p.ej. v1.0.0

jobs:
  ios:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios
          pod install --no-repo-update

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Decode signing assets
        shell: bash
        run: |
          printf "%s" "${{ secrets.P12_BASE64 }}" | base64 --decode > cert.p12
          printf "%s" "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          printf "%s" "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" > AuthKey.p8
          printf "%s" "${{ secrets.P12_PASSWORD }}" > p12pass.txt

      # Verificación previa: el p12 es el correcto y la pass abre
      - name: Verify P12 (hash + password)
        shell: bash
        run: |
          echo "Runner SHA256:"
          shasum -a 256 cert.p12
          echo "Verificando que la contraseña abre el p12..."
          openssl pkcs12 -in cert.p12 -nokeys -passin file:p12pass.txt -info >/dev/null

      # EXTRAER cert y key con OpenSSL (y preparar variantes)
      - name: Extract cert & key with OpenSSL
        shell: bash
        run: |
          # Cert X.509
          openssl pkcs12 -in cert.p12 -clcerts -nokeys -passin file:p12pass.txt -out dist-cert.cer

          # Clave privada en claro (PEM)
          openssl pkcs12 -in cert.p12 -nocerts -nodes -passin file:p12pass.txt -out dist-key-raw.pem
          # Quedarnos SOLO con el bloque PRIVATE KEY
          awk '/-----BEGIN .*PRIVATE KEY-----/,/-----END .*PRIVATE KEY-----/' dist-key-raw.pem > dist-key-only.pem
          echo "Header key:"; head -n 2 dist-key-only.pem || true

          # Variante PKCS#8 DER (sin pass)
          openssl pkcs8 -topk8 -inform PEM -outform DER -in dist-key-only.pem -nocrypt -out dist-key-pkcs8.der

          # (Fallback final) Reconstruir un PKCS#12 nuevo simple
          openssl pkcs12 -export -inkey dist-key-only.pem -in dist-cert.cer -name "iOS Dist Identity" -out rebuilt.p12 -passout pass:rebuildpass

          # SHA1 del cert para set-key-partition-list
          CERT_SHA1=$(openssl x509 -in dist-cert.cer -noout -fingerprint -sha1 | sed 's/.*=//;s/://g' | tr '[:upper:]' '[:lower:]')
          echo "CERT_SHA1=$CERT_SHA1" > certsha1.env
          cat certsha1.env

      - name: Create dedicated keychain & import cert+key (robusto)
        shell: bash
        run: |
          set -e
          source certsha1.env
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          # 1) Importa el certificado (si ya existe, no romper)
          security import dist-cert.cer -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security -f x509 || true

          # 2) Intento A: importar la KEY como openssl/PEM
          if security import dist-key-only.pem -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security -f openssl -t priv; then
            echo "Imported private key as openssl/PEM"
          # 3) Intento B: importar la KEY como PKCS#8 DER
          elif security import dist-key-pkcs8.der -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security -f pkcs8 -t priv; then
            echo "Imported private key as PKCS#8 DER"
          # 4) Intento C: fallback: importar un PKCS#12 nuevo (key+cert)
          else
            echo "Trying fallback: rebuilt PKCS#12…"
            security import rebuilt.p12 -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security -f pkcs12 -P "rebuildpass"
          fi

          # Conceder acceso y asociar por SHA1
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain -Z "$CERT_SHA1"

          # (Opcional) Ver identidades disponibles
          security find-identity -v -p codesigning build.keychain || true

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.APP_IDENTIFIER }}</key>
              <string>Sansebassms AppStore Profile</string>
            </dict>
          </dict>
          </plist>
          EOF

      - name: Build signed IPA for App Store
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload to TestFlight (fastlane pilot)
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          cat > api_key.json <<EOF
          {
            "key_id": "${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
            "key": "$(cat AuthKey.p8)",
            "in_house": false
          }
          EOF
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n 1)
          fastlane pilot upload --api_key_path api_key.json --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

      - name: Upload signed IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-signed-ipa
          path: build/ios/ipa/*.ipa
