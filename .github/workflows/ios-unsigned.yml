name: iOS Signed Build & TestFlight

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  ios:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios
          pod install --no-repo-update

      - name: Install fastlane & jq
        run: |
          gem install fastlane -N
          brew install jq

      # Usar Xcode 16 (SDK iOS 18)
      - name: Select Xcode 16 (iOS 18 SDK)
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version
          echo "iPhoneOS SDK version: $(xcrun --sdk iphoneos --show-sdk-version)"

      - name: Decode signing assets
        shell: bash
        run: |
          printf "%s" "${{ secrets.P12_BASE64 }}" | base64 --decode > cert.p12
          printf "%s" "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          printf "%s" "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" > AuthKey.p8
          printf "%s" "${{ secrets.P12_PASSWORD }}" > p12pass.txt

      - name: Verify P12 (hash + password)
        shell: bash
        run: |
          echo "Runner SHA256:"; shasum -a 256 cert.p12
          openssl pkcs12 -in cert.p12 -nokeys -passin file:p12pass.txt -info >/dev/null

      - name: Extract cert & key with OpenSSL
        shell: bash
        run: |
          # Cert en PEM
          openssl pkcs12 -in cert.p12 -clcerts -nokeys -passin file:p12pass.txt -out dist-cert.cer
          # Clave privada (PEM sin pass)
          openssl pkcs12 -in cert.p12 -nocerts -nodes -passin file:p12pass.txt -out dist-key-raw.pem
          awk '/-----BEGIN .*PRIVATE KEY-----/,/-----END .*PRIVATE KEY-----/' dist-key-raw.pem > dist-key-only.pem
          # PKCS#12 de respaldo para import
          openssl pkcs12 -export -inkey dist-key-only.pem -in dist-cert.cer -name "iOS Dist Identity" -out rebuilt.p12 -passout pass:rebuildpass
          # SHA1 (info)
          openssl x509 -in dist-cert.cer -noout -fingerprint -sha1

      - name: Create dedicated keychain & import identities (robusto)
        shell: bash
        env:
          KEYCHAIN_PASSWORD: actions
        run: |
          set -e
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"

          # Crear y desbloquear keychain dedicado
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Importar cert + key
          security import dist-cert.cer   -k "$KEYCHAIN_PATH" -A -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcodebuild -f x509 || true
          # Intento 1: clave en PEM
          if security import dist-key-only.pem -k "$KEYCHAIN_PATH" -A -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcodebuild -f openssl -t priv; then
            echo "Imported private key (PEM)"
          else
            # Intento 2: PKCS#12 reconstruido
            security import rebuilt.p12 -k "$KEYCHAIN_PATH" -A -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcodebuild -f pkcs12 -P "rebuildpass"
          fi

          # MUY IMPORTANTE: establecer partition list sobre ESTE keychain concreto
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "Identidades disponibles:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH" || true

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.APP_IDENTIFIER }}</key>
              <string>Sansebassms AppStore Profile</string>
            </dict>
          </dict>
          </plist>
          EOF

      - name: Fix FLUTTER_ROOT for iOS build
        shell: bash
        run: |
          mkdir -p ios/Flutter
          if [ -f ios/Flutter/Generated.xcconfig ]; then
            /usr/bin/sed -i '' -E "s#^FLUTTER_ROOT=.*#FLUTTER_ROOT=${FLUTTER_ROOT}#g" ios/Flutter/Generated.xcconfig || true
          else
            cat > ios/Flutter/Generated.xcconfig <<EOF
          FLUTTER_ROOT=${FLUTTER_ROOT}
          EOF
          fi
          for cfg in ios/Flutter/Debug.xcconfig ios/Flutter/Release.xcconfig; do
            [ -f "$cfg" ] || touch "$cfg"
            grep -q 'Generated.xcconfig' "$cfg" || echo '#include? "Generated.xcconfig"' >> "$cfg"
          done
          echo "Usando $(grep ^FLUTTER_ROOT ios/Flutter/Generated.xcconfig)"

      # Archive sin firmar y firmamos al export
      - name: Archive with xcodebuild (unsigned)
        shell: bash
        run: |
          set -e
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath ../build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
            clean archive

      - name: Export IPA (sign here)
        shell: bash
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios_export

      - name: Upload to TestFlight (fastlane pilot)
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          # Escapar la clave .p8 a JSON correctamente
          KEY=$(jq -Rs . < AuthKey.p8)
          cat > api_key.json <<EOF
          {
            "key_id": "${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
            "key": $KEY,
            "in_house": false
          }
          EOF
          IPA_PATH=$(ls build/ios_export/*.ipa | head -n 1)
          fastlane pilot upload --api_key_path api_key.json --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

      - name: Upload signed IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-signed-ipa
          path: build/ios_export/*.ipa
