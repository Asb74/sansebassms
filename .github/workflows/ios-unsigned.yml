name: iOS Signed Build & TestFlight

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'  # lanza al crear un tag tipo v1.2.3

jobs:
  ios:
    runs-on: macos-latest
    timeout-minutes: 60
    env:
      # Fuerza Xcode 16.2 (SDK iOS 18)
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2 + verify SDK
        shell: bash
        run: |
          sudo xcode-select -s "$DEVELOPER_DIR"
          xcodebuild -version
          # Muestra SDKs (no falles si grep no encuentra nada)
          xcodebuild -showsdks | tee /dev/stderr | grep -E "iPhoneOS|iOS" || true

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios
          pod install --no-repo-update

      - name: Install fastlane & jq
        run: |
          gem install fastlane -N
          brew install jq || true

      # === Firmado ===
      - name: Decode signing assets
        shell: bash
        run: |
          # P12 y profile vienen en base64 -> decodifica
          printf "%s" "${{ secrets.P12_BASE64 }}" | base64 --decode > cert.p12
          printf "%s" "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          # La API key: si TU secreto ya está en raw (.p8), NO decodifiques:
          printf "%s" "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" > AuthKey.p8
          # Password del P12 a archivo para evitar problemas de quoting
          printf "%s" "${{ secrets.P12_PASSWORD }}" > p12pass.txt

      - name: Verify P12 (hash + password)
        shell: bash
        run: |
          echo "Runner SHA256:"; shasum -a 256 cert.p12
          # Comprueba que abre con la pass
          openssl pkcs12 -in cert.p12 -nokeys -passin file:p12pass.txt -info >/dev/null

      - name: Create keychain & import identity
        shell: bash
        env:
          KEYCHAIN_PASSWORD: actions
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Importa la identidad del P12 (cert+private key)
          security import cert.p12 -k build.keychain -P "$(cat p12pass.txt)" -T /usr/bin/codesign -T /usr/bin/security -f pkcs12

          # Pon este keychain como ÚNICO en la search list (evita que Xcode mire otros)
          security list-keychains -d user -s build.keychain

          # Permisos para codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          echo "Identidades de codesigning en el keychain:"
          security find-identity -v -p codesigning build.keychain || true

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      - name: Create ExportOptions.plist
        shell: bash
        run: |
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>destination</key><string>export</string>
            <key>stripSwiftSymbols</key><true/>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.APP_IDENTIFIER }}</key>
              <string>Sansebassms AppStore Profile</string>
            </dict>
          </dict>
          </plist>
          EOF

      # === Build sin firmar + export firmando ===
      - name: Fix FLUTTER_ROOT for iOS build
        shell: bash
        run: |
          mkdir -p ios/Flutter
          if [ -f ios/Flutter/Generated.xcconfig ]; then
            /usr/bin/sed -i '' -E "s#^FLUTTER_ROOT=.*#FLUTTER_ROOT=${FLUTTER_ROOT}#g" ios/Flutter/Generated.xcconfig || true
          else
            cat > ios/Flutter/Generated.xcconfig <<EOF
          FLUTTER_ROOT=${FLUTTER_ROOT}
          EOF
          fi
          for cfg in ios/Flutter/Debug.xcconfig ios/Flutter/Release.xcconfig; do
            [ -f "$cfg" ] || touch "$cfg"
            grep -q 'Generated.xcconfig' "$cfg" || echo '#include? "Generated.xcconfig"' >> "$cfg"
          done
          echo "Usando $(grep ^FLUTTER_ROOT ios/Flutter/Generated.xcconfig)"

      - name: Archive with xcodebuild (unsigned)
        shell: bash
        run: |
          set -e
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath ../build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
            clean archive

      - name: Export signed IPA
        shell: bash
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios/export

      # === Subida a TestFlight ===
      - name: Upload to TestFlight (fastlane pilot)
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        shell: bash
        run: |
          # Convierte la clave .p8 (con newlines) en string JSON seguro
          KEY=$(jq -Rs . < AuthKey.p8)
          cat > api_key.json <<EOF
          {"key_id":"${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
           "issuer_id":"${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
           "key": $KEY,
           "in_house": false}
          EOF
          IPA_PATH=$(ls build/ios/export/*.ipa | head -n 1)
          echo "Subiendo $IPA_PATH a TestFlight…"
          fastlane pilot upload --api_key_path api_key.json --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

      - name: Upload signed IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-signed-ipa
          path: build/ios/export/*.ipa
