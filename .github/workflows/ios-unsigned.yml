name: iOS Signed Build & TestFlight

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'   # sube a TestFlight cuando etiquetes, p.ej. v1.0.0

jobs:
  ios:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -N
          cd ios
          pod install --no-repo-update

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Decode signing assets
        shell: bash
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > cert.p12
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > AuthKey.p8

      # VerificaciÃ³n previa: si esto falla, la password o el .p12 no coinciden
      - name: Verify P12 password (openssl)
        run: |
          shasum -a 256 cert.p12
          openssl pkcs12 -in cert.p12 -nokeys -passin pass:${{ secrets.P12_PASSWORD }} -info >/dev/null

      - name: Create dedicated keychain & import cert
        run: |
          security create-keychain -p "" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.APP_IDENTIFIER }}</key>
              <string>Sansebassms AppStore Profile</string>
            </dict>
          </dict>
          </plist>
          EOF

      - name: Build signed IPA for App Store
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload to TestFlight (fastlane pilot)
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          cat > api_key.json <<EOF
          {
            "key_id": "${{ secrets.APP_STORE_CONNECT_KEY_ID }}",
            "issuer_id": "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}",
            "key": "$(cat AuthKey.p8)",
            "in_house": false
          }
          EOF
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n 1)
          fastlane pilot upload --api_key_path api_key.json --ipa "$IPA_PATH" --skip_waiting_for_build_processing true

      - name: Upload signed IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-signed-ipa
          path: build/ios/ipa/*.ipa
